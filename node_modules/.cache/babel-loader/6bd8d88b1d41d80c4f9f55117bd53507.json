{"ast":null,"code":"var _jsxFileName = \"C:\\\\HrmsFrontEnd\\\\hrms-front-end\\\\src\\\\pages\\\\JobAdvertisementAdd.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Card, Form, Button } from 'semantic-ui-react';\nimport CitieService from '../services/CitieService';\nimport JobPositionService from '../services/JobPositionService';\nimport WorkTypeService from '../services/WorkTypeService';\nimport WorkTimeService from '../services/WorkTimeService';\nimport JobAdvertisementService from '../services/JobAdvertisementService';\nimport { useFormik } from 'formik';\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function JobAdvertisementAdd() {\n  _s();\n\n  let jobAdvertisementService = new JobAdvertisementService();\n  const [cities, setCities] = useState([]);\n  const [jobPositions, setJobPositions] = useState([]);\n  const [workTypes, setWorkTypes] = useState([]);\n  const [workTimes, setWorkTimes] = useState([]);\n  useEffect(() => {\n    let cityService = new CitieService();\n    cityService.getAllCities().then(result => setCities(result.data.data));\n    let jobPositionService = new JobPositionService();\n    jobPositionService.getAllJobPosition().then(result => setJobPositions(result.data));\n    let workTypeService = new WorkTypeService();\n    workTypeService.getAllWorkType().then(result => setWorkTypes(result.data.data));\n    let workTimesService = new WorkTimeService();\n    workTimesService.getAllWorkTime().then(result => setWorkTimes(result.data.data));\n  }, []);\n  const {\n    values,\n    errors,\n    touched,\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    onBlur,\n    setFieldValue,\n    dirty,\n    isSubmitting\n  } = useFormik({\n    initialValues: {\n      jobPositionId: \"\",\n      numberOfOpenPosition: \"\",\n      cityId: \"\",\n      minSalary: \"\",\n      maxSalary: \"\",\n      workTypeId: \"\",\n      workTimeId: \"\",\n      applicationDeadline: \"\",\n      jobDescription: \"\"\n    },\n    validationSchema: Yup.object({\n      jobPositionId: Yup.number().required(\"Lutfen bir pozisyon seciniz !\"),\n      cityId: Yup.number().required(\"Lutfen bir sehir seciniz !\"),\n      numberOfOpenPosition: Yup.number().required(\"Lutfen acik pozisyon sayisi giriniz !\"),\n      minSalary: Yup.number().required(\"Lutfen minimum maas belirleyiniz !\"),\n      maxSalary: Yup.number().required(\"Lutfen maximum maas belirleyiniz !\"),\n      workTypeId: Yup.number().required(\"Lutfen calisma turunu seciniz !\"),\n      workTimeId: Yup.number().required(\"Lutfen calisma zamani seciniz !\"),\n      applicationDeadline: Yup.date().required(\"Lutfen son basvuru tarihini belirleyiniz !\"),\n      jobDescription: Yup.string().required(\"Lutfen aciklama giriniz !\")\n    }),\n    onSubmit: values => {\n      values.employerId = 5;\n      console.log(values);\n      jobAdvertisementService.add(values).then(result => console.log(result.data.data));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jobPostiongAdd\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(JobAdvertisementAdd, \"QHNoTyh2tB3QjyDhfBiBrXzvqCg=\", false, function () {\n  return [useFormik];\n});\n\n_c = JobAdvertisementAdd;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobAdvertisementAdd\");","map":{"version":3,"sources":["C:/HrmsFrontEnd/hrms-front-end/src/pages/JobAdvertisementAdd.jsx"],"names":["React","useEffect","useState","Card","Form","Button","CitieService","JobPositionService","WorkTypeService","WorkTimeService","JobAdvertisementService","useFormik","Yup","JobAdvertisementAdd","jobAdvertisementService","cities","setCities","jobPositions","setJobPositions","workTypes","setWorkTypes","workTimes","setWorkTimes","cityService","getAllCities","then","result","data","jobPositionService","getAllJobPosition","workTypeService","getAllWorkType","workTimesService","getAllWorkTime","values","errors","touched","handleSubmit","handleChange","handleBlur","onBlur","setFieldValue","dirty","isSubmitting","initialValues","jobPositionId","numberOfOpenPosition","cityId","minSalary","maxSalary","workTypeId","workTimeId","applicationDeadline","jobDescription","validationSchema","object","number","required","date","string","onSubmit","employerId","console","log","add"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Card,Form, Button} from 'semantic-ui-react';\r\nimport CitieService from '../services/CitieService';\r\nimport JobPositionService from '../services/JobPositionService';\r\nimport WorkTypeService from '../services/WorkTypeService';\r\nimport WorkTimeService from '../services/WorkTimeService';\r\nimport JobAdvertisementService from '../services/JobAdvertisementService';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from \"yup\";\r\n\r\nexport default function JobAdvertisementAdd() {\r\n\r\n    let jobAdvertisementService = new JobAdvertisementService();\r\n\r\n    const [cities, setCities] = useState([]);\r\n    const [jobPositions, setJobPositions] = useState([]);\r\n    const [workTypes, setWorkTypes] = useState([]);\r\n    const [workTimes, setWorkTimes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let cityService = new CitieService();\r\n        cityService.getAllCities().then((result) => setCities(result.data.data));\r\n\r\n        let jobPositionService = new JobPositionService();\r\n        jobPositionService.getAllJobPosition().then((result) => setJobPositions(result.data));\r\n\r\n        let workTypeService = new WorkTypeService();\r\n        workTypeService.getAllWorkType().then((result) => setWorkTypes(result.data.data));\r\n           \r\n        let workTimesService = new WorkTimeService();\r\n        workTimesService.getAllWorkTime().then((result) => setWorkTimes(result.data.data));\r\n    }, []);\r\n\r\n    const {\r\n\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleSubmit,\r\n        handleChange,\r\n        handleBlur,\r\n        onBlur,\r\n        setFieldValue,\r\n        dirty,\r\n        isSubmitting,\r\n    } = useFormik({\r\n        initialValues: {\r\n            jobPositionId: \"\",\r\n            numberOfOpenPosition: \"\",\r\n            cityId: \"\",\r\n            minSalary: \"\",\r\n            maxSalary: \"\",\r\n            workTypeId: \"\",\r\n            workTimeId: \"\",\r\n            applicationDeadline: \"\",\r\n            jobDescription: \"\",\r\n        },\r\n        validationSchema: Yup.object({\r\n            jobPositionId: Yup.number().required(\"Lutfen bir pozisyon seciniz !\"),\r\n            cityId: Yup.number().required(\"Lutfen bir sehir seciniz !\"),\r\n            numberOfOpenPosition: Yup.number().required(\"Lutfen acik pozisyon sayisi giriniz !\"),\r\n            minSalary: Yup.number().required(\"Lutfen minimum maas belirleyiniz !\"),\r\n            maxSalary: Yup.number().required(\"Lutfen maximum maas belirleyiniz !\"),\r\n            workTypeId: Yup.number().required(\"Lutfen calisma turunu seciniz !\"),\r\n            workTimeId: Yup.number().required(\"Lutfen calisma zamani seciniz !\"),\r\n            applicationDeadline: Yup.date().required(\"Lutfen son basvuru tarihini belirleyiniz !\"),\r\n            jobDescription: Yup.string().required(\"Lutfen aciklama giriniz !\"),\r\n        }),\r\n        onSubmit: (values) => {\r\n            values.employerId = 5;\r\n            console.log(values);\r\n            jobAdvertisementService.add(values).then((result) => console.log(result.data.data));        \r\n        \r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"jobPostiongAdd\">\r\n            <div className=\"card\"></div>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}